clc;
clear all
close all
%%  
%  数据来源是MIT-BIH 心律失常数据库。
%  用工具箱的rdsamp读取心电信号，数据格式是:"样本数"×2，第一列是MLII导联数据，
%  第二列是V5导联数据
[tm, signal,Fs]=rdsamp('C:\Program Files\MATLAB\matlab_work\201\201.dat',[],1000);
x1 = signal(:,1); %单独读取第二列V5导联数据
fs = 200;              
x_len = length (x1);  % 获得数据长度  
for i=1:22
    t1(i) = x1(1);  % 将信号往后推16+6个样本，为与滤波后图形保持一致
end
raw_sig = [t1,x1(1:(x_len-22))']; %将修正延迟后的信号另存为raw_sig

figure(1)
subplot(6,1,1)
plot(raw_sig);
axis tight;
title('Raw ECG Signal');

%%  Low Pass Filter  H(z) = ((1 - z^(-6))^2)/(1 - z^(-1))^2
b=[1 0 0 0 0 0 -2 0 0 0 0 0 1];
a=[1 -2 1];
x2=filter(b,a,x1); 
for i=1:16
    t2(i) = x2(1);%将信号再延迟16个采样点，因为低通已经造成信号6个采样点的延迟
end
x_lp = [t2,x2(1:(x_len-16))']; %将修正低通延迟后的信号另存为x_lp

subplot(6,1,2)
plot(x_lp)
axis tight;
title('Low Pass Filter');

%% 高通,截止频率5Hz  H(z) = (-1+32z^(-16)+z^(-32))/(1+z^(-1))
b = [-1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 -32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1];
a = [1 -1];
x_hp=filter(b,a,x2); %高通滤波,16个样本延迟
x_hp = x_hp/ max( abs(x_hp ));  %归一化

subplot(6,1,3)
plot(x_hp)
axis tight;
title('High Pass filter');

%% 导数滤波  H(z) = (1/8T)(-z^(-2) - 2z^(-1) + 2z + z^(2))
b = [-1 -2 0 2 1]/8;
a = 1;
x_diff = filter(b,a,x_hp);%导数滤波器，即微分,造成2个样本延迟,忽略
for i=1:37
    x_diff(i) = 0; %舍弃由于延迟造成的误差值，6+16+15(后面积分还有15个延迟)=37
end
x_diff = x_diff/ max( abs(x_diff )); %归一化

subplot(6,1,4)
plot(x_diff)
axis tight;
title('derivative filter');

%% 平方函数，对导数进行非线性放大
x_sq = x_diff .^2;  %逐点平方对幅度变化敏感，误检、漏检率增加
% x_sq = abs( x_diff); %取绝对值代替平方

subplot(6,1,5)
plot(x_sq)
axis tight;
title('square function');

%% 移动窗积分-平均  Y(nt) = (1/N)[x(nT-(N - 1)T)+ x(nT - (N - 2)T)+...+x(nT)]
% 窗宽的选择非常重要，将直接影响最终R波的检测精度。如果R波检测到在山腰，可考虑改窗宽
for n=1:(x_len-15);
    x_integral(n)=sum(x_sq(n:n+15))/16;  %移动窗积分造成15个样本延迟
end
for n=(x_len-14):x_len;
    x_integral(n)=sum(x_sq(n:x_len))/(x_len-n+1);
end

x_integral=[zeros(1,6),x_integral(1:x_len-6)];  %积分后波形往后推6个样本，使之与滤波信号对齐
subplot(6,1,6)
plot((1:x_len),x_integral,(1:x_len),x_hp);  %同时画出积分和滤波信号，观察波形是否对齐
axis tight;
title('移动窗口积分');

%%  估计R峰的数量
num_of_R = 0; 
max_diff = max(x_diff);
thresh = 0.375*max_diff; 
for i=38:length(x_diff)-1;  %前37个已置0
    if x_hp(i)>thresh && (x_diff(i,1)*x_diff(i+1)<0) 
        num_of_R = num_of_R+1;
    end
end

%% 进行阈值比较
% M=285; %此为经验参数
M=floor(length(x_hp)/num_of_R);  
SPKI=max(x_integral(1:M));  %取其中一份的max作为初始积分信号峰值估计
SPKF=max(x_hp(1:M)); %取其中一份的max作为初始滤波信号峰值估计

NPKI=0;  %噪声峰值初始化为0；
NPKF=0;  
locs = zeros(1,x_len);   %locs数组，用于存放大于两个设定阈值的点的坐标，初始化为0
temp = zeros(1,x_len);   %temp数组，用于存放R峰候选者
t2 = 1;
a2 = 1;
reset_thresh = 0;  %阈值重置标志位，默认为0，为1时表示用另一套公式更新阈值
for i=1:num_of_R;  %%遍历所有R峰
    n1=(i-1)*M +1;  %分段检测，n1是该段起始点，n2是终止点
    n2=i*M;
    get_R=0;  %是否找到R峰的标志位，为1时表示找到R峰

    %%%%%%%%%%%%%%%%%  一阈值于积分信号，二阈值于滤波信号  %%%%%%%%%%%%%%%%%%%%
    if reset_thresh ==0  %默认的阈值更新公式
        PEAKI=max( x_integral (n1:n2));  %找出这一段integral后QRS波群的峰值
        SPKI=0.125*PEAKI+0.875*SPKI;
        NPKI=0.125*PEAKI+0.875*NPKI;
        THRESHOLDI1=NPKI+0.25*(SPKI-NPKI);  

        PEAKF=max( x_hp (n1:n2));   %找出这一段filter后QRS波群的峰值
        SPKF=0.125*PEAKF+0.875*SPKF;
        NPKF=0.125*PEAKF+0.875*NPKF;
        THRESHOLDF1=NPKF+0.25*(SPKF-NPKF);
    end
    
    if reset_thresh==1  %用该套公式更新阈值时是因为上一次找到的R峰是用低阈值所找到的
        PEAKI=max( x_integral (n1:n2));  
        SPKI=0.25*PEAKI+0.75*SPKI;
        NPKI=0.125*PEAKI+0.875*NPKI;
        THRESHOLDI1=NPKI+0.25*(SPKI-NPKI);

        PEAKF=max( x_hp (n1:n2));   %将一份的max作为filter后QRS波群的峰值
        SPKF=0.25*PEAKF+0.75*SPKF;
        NPKF=0.125*PEAKF+0.875*NPKF;
        THRESHOLDF1=NPKF+0.25*(SPKF-NPKF);
        reset_thresh=0;  %重置该标志位
    end

    while get_R==0  %设置一个循环，直到找到R峰才允许跳出
        for n=n1:n2;
            if x_integral(n)>THRESHOLDI1 && x_hp(n)>THRESHOLDF1 %大于第一、二阈值
                temp(n) = x_hp(n); %候选者存放起来
            else
                temp(n)= 0;  %否则认为是噪声存0
            end
        end
        if n==n2 && max(temp(n1:n2))==0  %如果遍历完了仍未找到R峰，则将阈值下降一半，复检
            THRESHOLDI1=0.5*THRESHOLDI1;
            THRESHOLDF1=0.5*THRESHOLDF1;
            reset_thresh=1;
            continue  %使用低阈值重新找
        end

        [a,m]=max(temp(n1:n2));  %在通过阈值检测的所有数中取最大的作为R峰
        [aa(i),mm(i)]=max(temp(n1:n2));
        a1 = a2;
        a2 = a;
        t1 = t2;  %上一次R峰位置
        t2 = m;  %新找到的R峰位置
        if i>=2;
            RR_interval = ((t2+(i-1)*M)-(t1+(i-2)*M))*1000/200;  %将RR间隔与静息期400ms作比较
                if RR_interval<400  %如果静息期内出现2个R波，则只保留大的那个
                    if (x_hp(t1+6+(i-2)*M)> x_hp(t2+6+(i-1)*M))%比较静息期哪个R波大
                        a = a1;
                        m = t1; %上一次的R峰更大，保存旧的
                        if (t1+80)>M  %400/5ms=80个样本点,360采样率则为144
                            n1=(t1+80-M)+(i-1)*M;  %跳过静息期
                        else
                            n1=(t1+80)+(i-1)*M;
                        end
                        continue %重新找这一段的R峰
                    else  %进入此处证明上一个R波必定是错的
                        a = a2;
                        m = t2; %新找到的R峰更大，保存新的
                        locs(t1+(i-2)*M)=0;  %将上一个错误判断的R峰信息清零
                        locs(t2+(i-2)*M)=a;  %更新上一次R峰的信息
                        if t2+80 > M  %跳过静息期
                            n1=(t2+80-M)+(i-1)*M; 
                        else
                            n1=(t2+80)+(i-1)*M;
                        end
                        continue  %重新找
                    end
                end
        end
        locs(m+(i-1)*M)=a;   %%寻找temp序列最大值及其对应的点序号
        get_R=1; %找到R峰
    end
end
%%  显示QRS峰 
figure(2)
hold on; 
plot(tm,x_hp);
for n=1:x_len
    if locs(n)~=0  %不为0的点即是筛选出来的R峰点
        plot(tm(n),x_hp(n),'ro');
    end
end
title('修正延迟后的R峰与滤波后心电图的关系');
hold off;
